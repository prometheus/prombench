#On using nodeAffinity, node-exporter was being deployed on prow node also
#Hence using 2 DaemonSets to use nodeSelector
#
#Node_Exporter is done after prometheus to use pod-affinity
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: node-exporter-prometheus-meta
  namespace: prombench-{{ .PR_NUMBER }}
spec:
  selector:
    matchLabels:
      app: node-exporter
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      namespace: prombench-{{ .PR_NUMBER }}
      labels:
        app: node-exporter
        node: meta
      name: node-exporter
    spec:
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: prometheus
                operator: In
                values:
                - meta
            topologyKey: cloud.google.com/gke-nodepool
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
      hostNetwork: true
      hostPID: true
      nodeSelector:
        cloud.google.com/gke-nodepool: prometheus-{{ .PR_NUMBER }}
      containers:
      - image: quay.io/prometheus/node-exporter:v0.16.0
        args:
        - "--path.procfs=/host/proc"
        - "--path.sysfs=/host/sys"
        name: node-exporter
        ports:
        - containerPort: 9100
          hostPort: 9100
          name: scrape
        volumeMounts:
        - name: proc
          readOnly:  true
          mountPath: /host/proc
        - name: sys
          readOnly: true
          mountPath: /host/sys
      tolerations:
      - effect: NoSchedule
        operator: Exists
      volumes:
      - name: proc
        hostPath:
          path: /proc
      - name: sys
        hostPath:
          path: /sys
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: node-exporter-prometheus-test-{{ .PROMETHEUS_1_NAME }}
  namespace: prombench-{{ .PR_NUMBER }}
spec:
  selector:
    matchLabels:
      app: node-exporter
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      namespace: prombench-{{ .PR_NUMBER }}
      labels:
        app: node-exporter
        node: test-{{ .PROMETHEUS_1_NAME }}
      name: node-exporter
    spec:
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: prometheus
                operator: In
                values:
                - test-{{ .PROMETHEUS_1_NAME }}
            topologyKey: cloud.google.com/gke-nodepool
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
      hostNetwork: true
      hostPID: true
      nodeSelector:
        cloud.google.com/gke-nodepool: prometheus-{{ .PR_NUMBER }}
      containers:
      - image: quay.io/prometheus/node-exporter:v0.16.0
        args:
        - "--path.procfs=/host/proc"
        - "--path.sysfs=/host/sys"
        name: node-exporter
        ports:
        - containerPort: 9100
          hostPort: 9100
          name: scrape
        volumeMounts:
        - name: proc
          readOnly:  true
          mountPath: /host/proc
        - name: sys
          readOnly: true
          mountPath: /host/sys
      tolerations:
      - effect: NoSchedule
        operator: Exists
      volumes:
      - name: proc
        hostPath:
          path: /proc
      - name: sys
        hostPath:
          path: /sys
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: node-exporter-prometheus-test-{{ .PROMETHEUS_2_NAME }}
  namespace: prombench-{{ .PR_NUMBER }}
spec:
  selector:
    matchLabels:
      app: node-exporter
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      namespace: prombench-{{ .PR_NUMBER }}
      labels:
        app: node-exporter
        node: test-{{ .PROMETHEUS_2_NAME }}
      name: node-exporter
    spec:
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: prometheus
                operator: In
                values:
                - test-{{ .PROMETHEUS_2_NAME }}
            topologyKey: cloud.google.com/gke-nodepool
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
      hostNetwork: true
      hostPID: true
      nodeSelector:
        cloud.google.com/gke-nodepool: prometheus-{{ .PR_NUMBER }}
      containers:
      - image: quay.io/prometheus/node-exporter:v0.16.0
        args:
        - "--path.procfs=/host/proc"
        - "--path.sysfs=/host/sys"
        name: node-exporter
        ports:
        - containerPort: 9100
          hostPort: 9100
          name: scrape
        volumeMounts:
        - name: proc
          readOnly:  true
          mountPath: /host/proc
        - name: sys
          readOnly: true
          mountPath: /host/sys
      tolerations:
      - effect: NoSchedule
        operator: Exists
      volumes:
      - name: proc
        hostPath:
          path: /proc
      - name: sys
        hostPath:
          path: /sys
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: node-exporter-nodes
  namespace: prombench-{{ .PR_NUMBER }}
spec:
  selector:
    matchLabels:
      app: node-exporter
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      namespace: prombench-{{ .PR_NUMBER }}
      labels:
        app: node-exporter
      name: node-exporter
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
      hostNetwork: true
      hostPID: true
      nodeSelector:
        cloud.google.com/gke-nodepool: nodes-{{ .PR_NUMBER }}
      containers:
      - image: quay.io/prometheus/node-exporter:v0.16.0
        args:
        - "--path.procfs=/host/proc"
        - "--path.sysfs=/host/sys"
        name: node-exporter
        ports:
        - containerPort: 9100
          hostPort: 9100
          name: scrape
        volumeMounts:
        - name: proc
          readOnly:  true
          mountPath: /host/proc
        - name: sys
          readOnly: true
          mountPath: /host/sys
      tolerations:
      - effect: NoSchedule
        operator: Exists
      volumes:
      - name: proc
        hostPath:
          path: /proc
      - name: sys
        hostPath:
          path: /sys
---
apiVersion: v1
kind: Service
metadata:
  name: node-exporter
  namespace: prombench-{{ .PR_NUMBER }}
  labels:
    app: node-exporter
    monitored: "true"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: metrics
    port: 9100
    protocol: TCP
  selector:
    app: node-exporter