{%- for p in prometheus.instances %}
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: prometheus-test-{{ p.name }}
  labels:
    app: prometheus
    prometheus: test-{{ p.name }}
  annotations:
    scheduler.alpha.kubernetes.io/affinity: >
        {
          "podAntiAffinity": {
            "requiredDuringSchedulingIgnoredDuringExecution": [
              {
                "labelSelector": {
                  "matchExpressions": [
                    {
                      "key": "app",
                      "operator": "In",
                      "values": ["prometheus"]
                    }
                  ]
                },
                "topologyKey": "kubernetes.io/hostname"
             }
            ]
           }
         }
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: prometheus
        prometheus: test-{{ p.name }}
    spec:
      containers:
      - name: prometheus
        image: {{ p.image }}
        imagePullPolicy: Always
        resources: {{ p.resources }}
        {%- if p.env is defined %}
        env:
          {%- for e in p.env %}
        - name: {{ e.name }}
          value: "{{ e.value }}"
          {%- endfor %}
        {%- endif %}
        args: [
          "-config.file=/etc/prometheus/config/prometheus.yaml",
          "-storage.local.path=/data",
          {%- if p.flags is defined %}
            {%- for f in p.flags %}
          "{{ f }}",
            {%- endfor %}
          {%- endif %}
        ]
        volumeMounts:
        - name: config-volume
          mountPath: /etc/prometheus/config
        - name: instance-ssd
          mountPath: /data
      volumes:
      - name: config-volume
        configMap:
          name: prometheus-test
      - name: instance-ssd
        hostPath:
          # /mnt is where the KOPS AMIs mount the instance-store SSDs available on C3 instances
          # don't change this if you want Prometheus to take advantage of these local SSDs
          path: /mnt
      terminationGracePeriodSeconds: 300
      nodeSelector:
        isolation: prometheus
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-test-{{ p.name }}
  labels:
    app: prometheus
    prometheus: test-{{ p.name }}
spec:
  ports:
  - name: prometheus
    port: 9090
  selector:
    app: prometheus
    prometheus: test-{{ p.name }}
{%- endfor %}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-test
data:
  prometheus.yaml: |
    global:
      scrape_interval: {{ prometheus.scrapeInterval }}

    scrape_configs:
    - job_name: kubelets
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

      kubernetes_sd_configs:
      - role: node

    # Scrapes the endpoint lists for the Kubernetes API server, kube-state-metrics,
    # and node-exporter, which we all consider part of a default setup.
    - job_name: standard-endpoints
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        # As for kubelets, certificate validation fails for the API server (node)
        # and we circumvent it for now.
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

      kubernetes_sd_configs:
      - role: endpoints

      relabel_configs:
      - action: keep
        source_labels: [__meta_kubernetes_service_label_monitored]
        regex: true
      - action: replace
        source_labels: [__meta_kubernetes_service_name]
        target_label: job

    # Scrapes the endpoint lists for the kube-dns server. Which we consider
    # part of a default setup.
    - job_name: kube-components
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

      kubernetes_sd_configs:
      - role: endpoints

      relabel_configs:
      - action: replace
        source_labels: [__meta_kubernetes_service_label_k8s_app]
        target_label: job
      - action: keep
        source_labels: [__meta_kubernetes_service_name]
        regex: ".*-prometheus-discovery"
      - action: keep
        source_labels: [__meta_kubernetes_endpoint_port_name]
        regex: "http-metrics.*|https-metrics.*"
      - action: replace
        source_labels: [__meta_kubernetes_endpoint_port_name]
        regex: "https-metrics.*"
        target_label: __scheme__
        replacement: https
